git clone uri (catar uma cópia do repositório remoto)
git log (histórico)
git add <nome arquivo> (adiciona os arqs q serâo considerados no commit local) (pode usar máscara) ex: git add .
git commit -m 'comentário'   (commit local)
git commit -a -m 'comentário'   (commit local, adiciona tudo q foi modificado, só pra arqs já existentes no repositório)

git status <-s(short version)> (lista a situação do rep local)

git init (transforma o dir atual em repositório local)
git remote add <alias do remoto> <url> (linka o repositório reoto ao local)
git push <alias rep remoto> <nome do branch> (commita remoto / existe um branch padrão 'master')

git remote -v(verboso) (lista os reps remotos / 'origin' é um alias padrão)
git branch (mostra os branchs /  *=atual / master=default)
git branch <nome> (cria um branch)
git checkout <nome> (troca de branch) / este cmd faz outras coisas tb
git merge <nomebranch22> (sincroniza as mudanças do branch atual para o branch22>
git log --oneline --parents (mostra todos os commits  / cada commit no git tem um id e pode ter um commit pai/anterior)

git rebase <nomebranch22> (sincroniza as mudanças do branch atual para o branch22, mas dá uma rearranjada maluca, deixando o histórico linear entre os commits e seus pais, sem fazer 'galhos' no histórico>

os branchs, no git, na verdade apenas apontam para os ponteiros dos commits feitos 
git branch -d <nome> (apaga um branch)

git pull <alias> <branch> (traz as mudanças do rep alias já fazendo o merge possível)

http://pcottle.github.io/learnGitBranching/?demo
